import java.util.HashMap;
import java.util.Map;

public class CaesarCipher {

    private static final String ALPHABET = "В частности, перспективное планирование предполагает независимые способы реализации первоочередных требований. Вот вам яркий пример современных тенденций — разбавленное изрядной долей эмпатии, рациональное мышление обеспечивает актуальность благоприятных перспектив. Каждый из нас понимает очевидную вещь: постоянный количественный рост и сфера нашей активности требует от нас анализа форм воздействия. Также как дальнейшее развитие различных форм деятельности обеспечивает актуальность поставленных обществом задач. Прежде всего, существующая теория требует определения и уточнения существующих финансовых и административных условий. Прежде всего, сплочённость команды профессионалов прекрасно подходит для реализации системы обучения кадров, соответствующей насущным потребностям.";
    private static final int ALPHABET_LENGTH = ALPHABET.length();
    private static final int SHIFT = 3;

    public static String encrypt(String text) {
        StringBuilder encryptedText = new StringBuilder();
        Map<Character, Character> dictionary = new HashMap<>();
        for (int i = 0; i < ALPHABET_LENGTH; i++) {
            char ch = ALPHABET.charAt(i);
            char encryptedCh = ALPHABET.charAt((i + SHIFT) % ALPHABET_LENGTH);
            dictionary.put(ch, encryptedCh);
        }
        for (char ch : text.toCharArray()) {
            if (Character.isLetter(ch) && Character.UnicodeBlock.of(ch) == Character.UnicodeBlock.CYRILLIC) {
                Character encryptedCh = dictionary.get(ch);
                encryptedText.append(encryptedCh != null ? encryptedCh.charValue() : ch);
            } else {
                encryptedText.append(ch);
            }
        }
        return encryptedText.toString();
    }

    public static String decrypt(String text) {
        StringBuilder decryptedText = new StringBuilder();
        Map<Character, Character> dictionary = new HashMap<>();
        for (int i = 0; i < ALPHABET_LENGTH; i++) {
            char ch = ALPHABET.charAt(i);
            char decryptedCh = ALPHABET.charAt((i - SHIFT + ALPHABET_LENGTH) % ALPHABET_LENGTH);
            dictionary.put(ch, decryptedCh);
        }
        for (char ch : text.toCharArray()) {
            if (Character.isLetter(ch) && Character.UnicodeBlock.of(ch) == Character.UnicodeBlock.CYRILLIC) {
                Character decryptedCh = dictionary.get(ch);
                decryptedText.append(decryptedCh != null ? decryptedCh.charValue() : ch);
            } else {
                decryptedText.append(ch);
            }
        }
        return decryptedText.toString();
    }

    public static void main(String[] args) {
        String text = "Мир!";
        String encryptedText = encrypt(text);
        System.out.println("Зашифрованный текст: " + encryptedText);
        String decryptedText = decrypt(encryptedText);
        System.out.println("Расшифрованный текст: " + decryptedText);
    }
}
